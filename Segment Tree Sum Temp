#include "bits/stdc++.h"
using namespace std;
#define infinity 1<<30 //2^30
#define ll long long
#define pb push_back
#define FastIO ios_base::sync_with_stdio(0);cin.tie(0),cout.tie(0)
#define pi  3.14159265358979323846
#define INF 99999999
#define ff first
#define ss second
#define MAX_N 20

#define nnn  10000007
#define MAXN  10000007
#define mod 1000000007

/*vector<bool>is_prime(nnn+1,true);
vector<ll>primes;



bool check_prime(ll n){

    for(ll i=2;i*i<=n;i++){
        if(n%2==0){
            return false;
        }
    }

    return true;
}


void sieve(ll n){

    for(ll i=2;i*i<=nnn;i++){
        if(is_prime[i]){
            for(ll j=i*i;j<=nnn;j=j+i){
                is_prime[j]=false;
            }
        }
    }

    for(ll i=2;i<=nnn;i++){
        if(is_prime[i]){
            primes.pb(i);


        }
    }


}*/


#define mx 100001

ll arr[mx];
ll tree[mx*3];


void init(ll node,ll b,ll e){

    if(b==e){
       tree[node]=arr[b];

       return;
    }

    ll mid=(b+e)/2;

    ll left= node*2;

    ll right=node*2+1;

    init(left,b,mid);
    init(right,mid+1,e);

    tree[node]=tree[left]+tree[right];
}


ll query(ll node,ll b,ll e,ll i,ll j){

    if(b>=i && e<=j){
        return tree[node];
    }

    if(e<i || j<b){
        return 0;
    }

    ll left = node*2;
    ll right = node*2+1;

    ll mid = (b+e)/2;

    ll p1= query(left,b,mid,i,j);
    ll p2= query(right,mid+1,e,i,j);

    return p1+p2;
}


void update(ll node,ll b,ll e,ll i,ll newvalue){

    if(b>=i && i<=e){
        tree[node]=newvalue;

        return;
    }

    if(e<i || b>i){
        return;
    }

    ll mid = (b+e)/2;

    ll left = node*2;
    ll right = node*2+1;

    update(left,b,mid,i,newvalue);
    update(right,mid+1,e,i,newvalue);

    tree[node] =tree[left]+tree[right];


}


int main()
{



    ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);


    ll t; t=1;
    //cin>>t;

    //ll cnt=0;





    while(t--){

        ll n;cin>>n;

        for(ll i=1;i<=n;i++){
            cin>>arr[i];
        }

        init(1,1,n);




       








   }






	return 0;
}
